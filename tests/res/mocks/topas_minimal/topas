#!/bin/bash

OUTPUT_FILE_NAME_0="fluence_bp_protons_xy.csv"
OUTPUT_FILE_CONTENT_0="IyBUT1BBUyBWZXJzaW9uOiAzLjkKIyBQYXJhbWV0ZXIgRmlsZTogbWluaW1hbC50eHQKIyBSZXN1bHRzIGZvciBzY29yZXI6IEZsdWVuY2VCUHByb3RvbnNYWQojIEZpbHRlcmVkIGJ5OiBPbmx5SW5jbHVkZUlmSW5jaWRlbnRQYXJ0aWNsZXNOYW1lZCA9IDEgInByb3RvbiIKIyBTY29yZWQgaW4gY29tcG9uZW50OiBQaGFudG9tU2NvcmluZ0NvYXJzZVhZCiMgWCBpbiA0IGJpbnMgb2YgMC43NSBjbQojIFkgaW4gNCBiaW5zIG9mIDAuNzUgY20KIyBaIGluIDEgYmluICBvZiAxLjc1IGNtCiMgRmx1ZW5jZSAoIC9tbTIgKSA6IE1lYW4gICBTdGFuZGFyZF9EZXZpYXRpb24gICAKMCwgMCwgMCwgMC4wMDE3Nzc3Nzc3Nzc3Nzc3NzgsIDAuMDA0OTk1MTI0MzI4NDM1NzAxCjAsIDEsIDAsIDAsIDAKMCwgMiwgMCwgMCwgMAowLCAzLCAwLCAwLjAwMDg4ODg4ODg4ODg4ODg4ODksIDAuMDAyODgzOTM2Mzc1NjU4MDAxCjEsIDAsIDAsIDAuMDAwODg4ODg4ODg4ODg4ODg4OSwgMAoxLCAxLCAwLCAwLjAwMTc3Nzc3Nzc3Nzc3Nzc3OCwgMC4wMDU3Njc4NzI3NTEzMTYwMDIKMSwgMiwgMCwgMCwgMAoxLCAzLCAwLCAwLjAwMDg4ODg4ODg4ODg4ODg4ODksIDAuMDAyODgzOTM2Mzc1NjU4MDAxCjIsIDAsIDAsIDAuMDAyNjY2NjY2NjY2NjY2NjY3LCAwLjAwMjg4MzkzNjM3NTY1ODAwMQoyLCAxLCAwLCAwLjAwMDg4ODg4ODg4ODg4ODg4ODksIDAuMDA0MDc4NTAxOTM1NDc2NjU0CjIsIDIsIDAsIDAuMDAxNzc3Nzc3Nzc3Nzc3Nzc4LCAwLjAwNTc2Nzg3Mjc1MTMxNjAwMgoyLCAzLCAwLCAwLjAwMTc3Nzc3Nzc3Nzc3Nzc3OCwgMC4wMDQ5OTUxMjQzMjg0MzU3MDEKMywgMCwgMCwgMC4wMDA4ODg4ODg4ODg4ODg4ODg5LCAwLjAwMjg4MzkzNjM3NTY1ODAwMQozLCAxLCAwLCAwLCAwCjMsIDIsIDAsIDAsIDAKMywgMywgMCwgMCwgMAo="
sleep 1
printf '%s' "$OUTPUT_FILE_CONTENT_0" | base64 -d > $OUTPUT_FILE_NAME_0

OUTPUT_FILE_NAME_1="fluence_bp_protons_xy2.csv"
OUTPUT_FILE_CONTENT_1="IyBUT1BBUyBWZXJzaW9uOiAzLjkKIyBQYXJhbWV0ZXIgRmlsZTogbWluaW1hbC50eHQKIyBSZXN1bHRzIGZvciBzY29yZXI6IEZsdWVuY2VCUHByb3RvbnNYWTIKIyBGaWx0ZXJlZCBieTogT25seUluY2x1ZGVJZkluY2lkZW50UGFydGljbGVzTmFtZWQgPSAxICJwcm90b24iCiMgU2NvcmVkIGluIGNvbXBvbmVudDogUGhhbnRvbVNjb3JpbmdDb2Fyc2VYWTIKIyBYIGluIDQgYmlucyBvZiAwLjc1IGNtCiMgWSBpbiA0IGJpbnMgb2YgMC43NSBjbQojIFogaW4gMSBiaW4gIG9mIDEuNzUgY20KIyBGbHVlbmNlICggL21tMiApIDogTWVhbiAgIFN0YW5kYXJkX0RldmlhdGlvbiAgIAowLCAwLCAwLCAwLjAwMTc3Nzc3Nzc3Nzc3Nzc3OCwgMC4wMDI4ODM5MzYzNzU2NTgwMDEKMCwgMSwgMCwgMCwgMAowLCAyLCAwLCAwLCAwCjAsIDMsIDAsIDAuMDAwODg4ODg4ODg4ODg4ODg4OSwgMC4wMDI4ODM5MzYzNzU2NTgwMDEKMSwgMCwgMCwgMCwgMAoxLCAxLCAwLCAwLjAwMTc3Nzc3Nzc3Nzc3Nzc3OCwgMC4wMDU3Njc4NzI3NTEzMTYwMDIKMSwgMiwgMCwgMC4wMDE3Nzc3Nzc3Nzc3Nzc3NzgsIDAuMDA1NzY3ODcyNzUxMzE2MDAyCjEsIDMsIDAsIDAuMDAxNzc3Nzc3Nzc3Nzc3Nzc4LCAwLjAwNDk5NTEyNDMyODQzNTcwMQoyLCAwLCAwLCAwLjAwMjY2NjY2NjY2NjY2NjY2NywgMC4wMDI4ODM5MzYzNzU2NTgwMDEKMiwgMSwgMCwgMC4wMDA4ODg4ODg4ODg4ODg4ODg5LCAwLjAwNDA3ODUwMTkzNTQ3NjY1NAoyLCAyLCAwLCAwLjAwMDg4ODg4ODg4ODg4ODg4ODksIDAuMDAyODgzOTM2Mzc1NjU4MDAxCjIsIDMsIDAsIDAsIDAKMywgMCwgMCwgMCwgMAozLCAxLCAwLCAwLCAwCjMsIDIsIDAsIDAsIDAKMywgMywgMCwgMCwgMAo="
sleep 1
printf '%s' "$OUTPUT_FILE_CONTENT_1" | base64 -d > $OUTPUT_FILE_NAME_1

STDOUT_FILE_CONTENT=""
sleep 1
printf '%s' "$STDOUT_FILE_CONTENT" | base64 -d >&1

STDERR_FILE_CONTENT=""
sleep 1
printf '%s' "$STDERR_FILE_CONTENT" | base64 -d >&2
