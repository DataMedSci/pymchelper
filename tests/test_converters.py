"""
Tests for converters
"""
import logging
import os
from pathlib import Path
import shutil
import sys
import tempfile
import unittest

import numpy as np
import pytest

from pymchelper import run
from pymchelper.input_output import fromfile
from tests.utils.types import YieldFixture

logger = logging.getLogger(__name__)


@pytest.mark.smoke
class TestTrip2Ddd:

    def test_help(self):
        """Print help text and exit normally."""
        try:
            run.main(["tripddd", "--help"])
        except SystemExit as e:
            assert not e.code

    def test_version(self):
        """Print version and exit normally."""
        try:
            run.main(["tripddd", "--version"])
        except SystemExit as e:
            assert not e.code

    def test_noarg(self):
        """If pymchelper is called without arguments it should fail."""
        try:
            run.main(["tripddd"])
        except SystemExit as e:
            assert 2 == e.code


def unpack_sparse_file(filename):
    logger.info("Unpacking sparse file %s", filename)
    npzfile = np.load(filename)
    data = npzfile['data']
    indices = npzfile['indices']
    shape = npzfile['shape']

    result = np.zeros(shape)
    for ind, dat in zip(indices, data):
        result[tuple(ind)] = dat
    return result


@pytest.fixture
def shieldhit_files() -> YieldFixture[Path]:
    single_dir = Path(__file__).parent / "res" / "shieldhit" / "generated" / "single"
    assert single_dir.exists()
    yield single_dir


@pytest.mark.skipif(sys.platform == "darwin", reason="MacOSX does not have bdo2txt converter")
def test_shieldhit_files(shieldhit_files: Path):
    # loop over all .bdo files in all subdirectories
    for root, _, filenames in os.walk(shieldhit_files):
        for input_basename in filenames:
            logger.info("root: %s, file: %s", root, input_basename)

            inputfile_rel_path = os.path.join(root, input_basename)  # choose input file
            # ignore log files from runs
            if inputfile_rel_path.endswith(".log"):
                continue
            assert inputfile_rel_path.endswith(".bdo")

            working_dir = tempfile.mkdtemp(prefix="sparse_")  # make temp working dir for converter output files
            logger.info("Creating directory %s", working_dir)

            # generate output with pymchelper assuming .ref extension for output file
            pymchelper_output = os.path.join(working_dir, input_basename[:-3] + "npz")
            logger.info("Expecting file %s to be generated by pymchelper converter", pymchelper_output)
            run.main(["sparse", inputfile_rel_path, pymchelper_output])
            assert os.path.exists(pymchelper_output)

            # read the original file into a estimator structure
            estimator_data = fromfile(inputfile_rel_path)
            assert np.any(estimator_data.pages[0].data)

            # unpack saved sparse matrix
            reconstructed_sparse_mtx = unpack_sparse_file(pymchelper_output)

            # check if unpacked shape is correct
            assert estimator_data.x.n == reconstructed_sparse_mtx.shape[0]
            assert estimator_data.y.n == reconstructed_sparse_mtx.shape[1]
            assert estimator_data.z.n == reconstructed_sparse_mtx.shape[2]

            # check if unpacked data is correct
            assert np.array_equal(estimator_data.pages[0].data, reconstructed_sparse_mtx)

            logger.info("Removing directory %s", working_dir)
            shutil.rmtree(working_dir)


if __name__ == '__main__':
    unittest.main()
