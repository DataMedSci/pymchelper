name: Automated tests

on:
  push:
    branches: [ master ]
    tags: ['*']
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:
  # fast tests inluding linter and couple of fastests unit tests run with pytest
  smoke_test:
    if: >
      !contains(github.event.head_commit.message, '[ci skip]') &&
       !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest        
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2.3.1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Lint with flake8
      run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics pymchelper tests examples

    - name: Smoke test with pytest
      run: |         
         pytest -k "smoke" tests/
         
  # all tests on matrix of all possible python versions and OSes
  normal_test:
    strategy:
      matrix:
        python-version: ['2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10']
        platform: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          - platform: macos-latest
            python-version: 3.5
          - platform: macos-latest
            python-version: 3.6
          - platform: macos-latest
            python-version: 3.7
          - platform: macos-latest
            python-version: 3.8
          - platform: macos-latest
            python-version: 3.10
          - platform: windows-latest
            python-version: 3.5
          - platform: windows-latest
            python-version: 3.6
    runs-on: ${{ matrix.platform }}
    needs: [smoke_test]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Test with pytest
      run: |         
         pytest -k "not slow" tests/
         
  # long running tests and check of image generation
  full_test:
    strategy:
      matrix:
        python-version: ['2.7', '3.5', '3.9', '3.10']
    runs-on: ubuntu-latest
    needs: [normal_test]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Run all test with pytest
      run: |         
         pytest -k "slow" tests/
         
    - name: Check images generation for documentation
      run: |         
         cd docs/images_generation && ./run.sh

  # test if package generation works and optional package upload to pypi (only on release)
  make_and_upload_package:
    runs-on: ubuntu-latest
    needs: [full_test]
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v2.3.1
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Make wheel package
      run: |         
        pip install wheel twine
        
        # first call to version method would generate VERSION  file
        PYTHONPATH=. python pymchelper/run.py --version
        
        python setup.py bdist_wheel

        twine check dist/*.whl

        # makes source package
        python setup.py sdist

    - name: publish package to pypi
      uses: pypa/gh-action-pypi-publish@v1.4.2
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      with:
        # Password for your PyPI user or an access token
        password: ${{ secrets.TWINE_PASSWORD }}
        # The repository URL to use
        repository_url: "https://upload.pypi.org/legacy/"
        # The target directory for distribution
        packages_dir: dist/
        # Show verbose output.
        verbose: true

  # sphinx documentation generation and optional upload to github pages (on release)
  docs:
    runs-on: ubuntu-latest
    needs: [make_and_upload_package]
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
    - name: Build and Commit
      uses: sphinx-notes/pages@2.0
      with:
        documentation_path: docs
        requirements_path: docs/requirements.txt
    - name: Push changes to gh-pages branch
      # this action is being triggered on release tags (named v*)
      if: "github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')"
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages

  # generation of single-file executables
  build-executables:
    runs-on: ubuntu-latest
    needs: [full_test]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Number of commits to fetch. 0 indicates all history for all branches and tags.

      - name: Build Docker image
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          push: false
          tags: pymchelper

      - name: Generate single-file executables for mcscripter
        run: |
          docker run -v `pwd`/dist:/app/dist pymchelper:latest pyinstaller --add-data 'pymchelper/VERSION:pymchelper' --onefile --name mcscripter pymchelper/utils/mcscripter.py

      - name: Generate single-file executables for pld2sobp
        run: |
          docker run -v `pwd`/dist:/app/dist pymchelper:latest pyinstaller --add-data 'pymchelper/VERSION:pymchelper' --onefile --name pld2sobp pymchelper/utils/pld2sobp.py

      - name: Generate single-file executables for runmc
        run: |
          docker run -v `pwd`/dist:/app/dist pymchelper:latest pyinstaller runmc.spec

      - name: Generate single-file executables for convertmc
        run: |
          docker run -v `pwd`/dist:/app/dist pymchelper:latest pyinstaller convertmc.spec


      - name: Test single-file executables
        run: |
          ls -alh ./dist/
          ./dist/mcscripter --version
          ./dist/pld2sobp --version
          ./dist/runmc --version
          ./dist/convertmc --version
          docker run  -v `pwd`/dist:/test/ ubuntu:12.04 /test/convertmc --version
          docker run  -v `pwd`/dist:/test/ debian:stable /test/convertmc --version

      - name: Archive executables as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: executables
          path: ./dist

  # upload of single-file executables to release assets
  upload-executables:
    runs-on: ubuntu-latest
    needs: [build-executables]

    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Number of commits to fetch. 0 indicates all history for all branches and tags.

      - uses: actions/download-artifact@v2
        with:
          name: executables
          path: ./dist

      - name: Add artifact with util files to the release
        uses: ncipollo/release-action@v1.9.0
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          allowUpdates:  true
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          artifacts: './dist/*'
          token:  ${{ secrets.GITHUB_TOKEN }}

  
  generate-deb-packages:
    runs-on: ubuntu-latest
    needs: [upload-executables]
    
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v2

      - name: Generate deb packages
        working-directory: debian_packages
        run: ./generate_deb_packages.sh

      - name: Archive deb package as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: 'debian_packages/*.deb'

  test_deb:
    runs-on: ubuntu-latest
    needs: [generate-deb-packages]
    strategy:
      matrix:
        docker-tag: ['debian:8', 'debian:9', 'debian:10', 'debian:11', 'debian:stable', 'ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:21.04']
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: deb
          path: ./

      - name: Inspect artifacts
        run: find . -name "*.deb" -printf 'Contents of package %p\n' -exec dpkg-deb --contents {} \;

      - name: Test installation
        run: docker run --volume `pwd`:/pkg ${{ matrix.docker-tag }} /bin/sh -c "ldd --version; dpkg --install /pkg/pymchelper-*.deb; convertmc --version; runmc --version"

  repo_prepare:
      runs-on: ubuntu-latest
      needs: [generate-deb-packages]
      steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: deb
          path: debian_packages/
    
      - name: Import GPG key from a secret variable
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}          
      
      - name: Print GPG user IDs and save files to be included in repository
        working-directory: debian_packages
        run: |
          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import_gpg.outputs.name }}"
          echo "email:       ${{ steps.import_gpg.outputs.email }}"
          echo "${{ steps.import_gpg.outputs.fingerprint }}" > key_fingerprint.txt
          gpg --export --armor --output public.gpg

      - name: Create reposity and add packages
        working-directory: debian_packages
        run: ./add_packages_to_repo.sh

      - name: Archive directory with repository as artifact
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: 'debian_packages/public'

  repo_upload:
      runs-on: ubuntu-latest
      needs: [repo_prepare, test_deb]
      steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: repo
          path: debian_packages/public

      - name: Tuning
        working-directory: debian_packages
        run: |
          mv datamedsci.list public/
          touch public/.nojekyll

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.7
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: debian_packages/public # The folder the action should deploy.
          repository-name: DataMedSci/deb_package_repository
          ssh-key: ${{ secrets.DEB_REPO_PRIVATE_KEY }}
          clean: true
          single-commit: true