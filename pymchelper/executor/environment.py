"""Environment module."""


from pymchelper.executor.options import SimulationOptions
from pymchelper.simulator_type import SimulatorType


class MCEnvironment:
    """
    Base class for MC environment.

    This class provides information about MC engine executable file name.
    Validation method for extra options and used to update settings of MC engine.
    """

    def __init__(self, options: SimulationOptions) -> None:
        """Initialize MC environment."""
        self.options = options

    @staticmethod
    def executable_file_name() -> str:
        """Retruns executable file name."""
        raise NotImplementedError

    @staticmethod
    def simulation_pyte() -> SimulatorType:
        """Return simulator type."""
        raise NotImplementedError

    def set_rng_seed(self, rng_seed: int):
        """Set random number generator seed."""
        raise NotImplementedError

    def set_no_of_primaries(self, number_of_primaries: int):
        """Set number of primaries."""
        raise NotImplementedError

    def validate_cmdline_opt(self):
        """Validate extra options."""
        raise NotImplementedError


class FlukaEnvironment(MCEnvironment):
    """FLUKA Environment."""

    @staticmethod
    def executable_file_name() -> str:
        """Retruns executable file name."""
        return 'rfluka'

    @staticmethod
    def simulation_pyte() -> SimulatorType:
        """Return simulator type."""
        return SimulatorType.fluka


class __SH12AEnvironment(MCEnvironment):

    @staticmethod
    def simulation_pyte() -> SimulatorType:
        """Return simulator type."""
        return SimulatorType.shieldhit

    def set_rng_seed(self, rng_seed: int):
        """Modify command line options of the MC engine by setting (or overriding) the value of RNG seed."""
        # transform option list from plain string to a list of values for easier manipulation
        options = self.options.cmdline_opts
        if options is None:
            return
        options_list = options.split()

        # If RNG seed is missing on the option list, then the code below will set it to given value
        if '-N' not in options_list:
            options += " -N {:d}".format(rng_seed)
        # if RNG is present on the option list, then we override its value
        else:
            # in SHIELD-HIT12A RNG seed is specified by -N option
            index_of_rng_opt = options_list.index('-N')  # find index of '-N'
            options_list[index_of_rng_opt + 1] = str(rng_seed)  # override the value of current -N option
            options = ' '.join(options_list)  # reconstruct option string

        self.options.cmdline_opts = options

    def set_no_of_primaries(self, number_of_primaries: int):
        """Modify command line options of the MC engine by setting (or overriding) the number of primaries."""
        # transform option list from plain string to a list of values for easier manipulation
        options = self.options.cmdline_opts
        if options is None:
            return
        options_list = options.split()

        # If no of primaries is missing on the option list, then the code below will set it to given value
        if '-n' not in options_list:
            options += " -n {:d}".format(number_of_primaries)
        else:
            # see `set_rng_seed` for the logic
            index_of_prim_opt = options_list.index('-n')
            options_list[index_of_prim_opt + 1] = str(number_of_primaries)
            options = ' '.join(options_list)

        self.options.cmdline_opts = options

    def validate_cmdline_opt(self):
        """Validate extra options provided by the user."""
        # transform option list from plain string to a list of values for easier manipulation
        if self.options.cmdline_opts is None:
            return
        options_list = self.options.cmdline_opts.split()

        # transform option list to a set to ease finding common part of unsupported and current options
        options_set = set(options_list)
        # set of options which cannot be overwritten by the user
        # these include locations of the input files which are fixed to the temporary workspace directories
        # generated by the `pymchelper` code
        unsupported = {'-b', '--beamfile', '-g', '--geofile', '-m', '--matfile', '-d', '--detectfile'}
        # raise an error if some of the unsupported option was provided by user (i.e. via -m option to `runmc` command)
        if options_set & unsupported:
            # TODO replace exception with warning and ignore such options  # skipcq: PYL-W0511
            raise SyntaxError("Unsupported option encountered: {:s}".format(",".join(options_set & unsupported)))


class SH12AEnvironmentLinux(__SH12AEnvironment):
    """SHIELD-HIT12A Environment for Linux."""

    @staticmethod
    def executable_file_name() -> str:
        """Retruns executable file name."""
        return 'shieldhit'


class SH12AEnvironmentWindows(__SH12AEnvironment):
    """SHIELD-HIT12A Environment for Windows."""

    @staticmethod
    def executable_file_name() -> str:
        """Retruns executable file name."""
        return 'shieldhit.exe'


class TopasEnvironment(MCEnvironment):
    """TOPAS Environment."""

    @staticmethod
    def executable_file_name() -> str:
        """Retruns executable file name."""
        return 'topas'

    @staticmethod
    def simulation_pyte() -> SimulatorType:
        """Return simulator type."""
        return SimulatorType.topas
