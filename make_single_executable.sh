#!/usr/bin/env bash

set -x # Print command traces before executing command

set -e # Exit immediately if a simple command exits with a non-zero status.

set -o pipefail # Return value of a pipeline as the value of the last command to
                # exit with a non-zero status, or zero if all commands in the
                # pipeline exit successfully.

# directory containing setup.py and project files
PROJDIR=`pwd`
PROJNAME='pymchelper'

# there might be many python interpreters available
# figure it out and save its name in GOOD_PYTHON_INTERPRETER variable
# if none, exit
find_python_interpreter() {
    GOOD_PYTHON_INTERPRETER="none"

    # loop over possible python versions
    for PYTHON_INTERPRETER in python3.7 python3.6 python3.5 python3 python
    do

        # check if interpreter is installed
        echo "Checking if " $PYTHON_INTERPRETER " is installed"
        if which $PYTHON_INTERPRETER > /dev/null 2>&1; then
            #Python is installed
            echo "Checking version of " $PYTHON_INTERPRETER
            set +e
            $PYTHON_INTERPRETER -c "import sys; print(sys.version); sys.exit(sys.version_info < (3, 5));"
            set -e
            IS_OK=$?
            # check if interpreter is version higher than 3.5
            if [ $IS_OK -eq 0 ]; then
                GOOD_PYTHON_INTERPRETER=$PYTHON_INTERPRETER
                echo $PYTHON_INTERPRETER 'has version >= 3.5'
            fi
        else
            echo "Python version $PYTHON_INTERPRETER is not installed."
        fi
    done

    if [ $GOOD_PYTHON_INTERPRETER == "none" ]; then
        echo "Haven't found python version greater or equal than 3.5"
        exit 1
    fi
}

#make single file executable with given name, for given entrypoint
make_zipapp() {

    EXENAME=$1
    ENTRYPOINT=$2

    # temporary dir, convenient for packaging
    TMPDIR=`mktemp -d`

    # make directory, named the same way as the single executable we want to create
    mkdir -p $TMPDIR/$EXENAME

    # generate wheel package in temporary directory
    $GOOD_PYTHON_INTERPRETER setup.py bdist_wheel --dist-dir $TMPDIR/dist --bdist-dir $TMPDIR/build

    # check if wheels are generated
    ls -al $TMPDIR/dist/*.whl

    # wheel package contains all module sources (and extracted version)
    # we will unpack it and use as core code for single executable
    unzip $TMPDIR/dist/*.whl -d $TMPDIR/$EXENAME

    # go to TMPDIR
    cd $TMPDIR

    # use zipapp module to make a single executable zip file
    # zipapp was introduced in Python 3.5: https://docs.python.org/3/library/zipapp.html
    # files generated by zipapp can be executed by all Python versions greater than 2.6
    # zipapp will generate __main__.py file in $EXENAME directory
    $GOOD_PYTHON_INTERPRETER -m zipapp $EXENAME -p "/usr/bin/env python" -m $ENTRYPOINT

    # add executable bits
    chmod ugo+x $EXENAME.pyz

    # copy back to project dir
    cp $EXENAME.pyz $PROJDIR
    cd -
}

test_zipapp() {
    # temporary dir, convenient for packaging
    TMPDIR=`mktemp -d`

    # packaged app
    APPFILE=$1

    # copy app to temp dir
    cp -r $APPFILE $TMPDIR

    # go to TMPDIR
    cd $TMPDIR

    # check if app is working
    $APPFILE --version
    $APPFILE --help

    # go back
    cd -
}


# find python interpreter with version higher than 3.5 or exit
find_python_interpreter

# make single executable called convertmc.pyz:
# - containing modules from wheel package
# - executing bdo2txt:main function
make_zipapp 'convertmc' 'pymchelper.run:main'

# check if single executable can be called
test_zipapp `pwd`/'convertmc.pyz'